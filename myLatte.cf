-- programs ------------------------------------------------

-- wiazanie konkatenacji

entrypoints        Program ;

Program.           Program ::= [Stmt] ;

ArgTypeRef.        ArgType ::= "ref" Type;

ArgTypeVal.        ArgType ::= Type;

Arg.               Arg ::= ArgType Ident ;

separator          Arg "," ;

separator          ArgType "," ;

-- statements ----------------------------------------------

Block.             Block ::= "{" [Stmt] "}" ;

FnDef.	           Stmt ::= Type Ident "(" [Arg] ")" Block ;

separator          Stmt "" ;

Empty.             Stmt ::= ";" ;

BStmt.             Stmt ::= Block ;

Decl.              Stmt ::= Type [Item] ";" ;

NoInit.            Item ::= Ident ;

Init.              Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

Ass.               Stmt ::= Ident "=" Expr  ";" ;

Ret.               Stmt ::= "return" Expr ";" ;

Cond.              Stmt ::= "if" "(" Expr ")" Stmt  ;

CondElse.          Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

While.             Stmt ::= "while" "(" Expr ")" Stmt ;

SExp.              Stmt ::= Expr  ";" ;

-- Types ---------------------------------------------------

Int.               Type ::= "int" ;

Str.               Type ::= "string" ;

Bool.              Type ::= "boolean" ;

FunctionType.      Type ::= Type "(" [ArgType] ")" ;

separator          Type "," ;

-- Expressions ---------------------------------------------

EVar.              Expr7 ::= Ident ;

ELitInt.           Expr7 ::= Integer ;

ELitTrue.          Expr7 ::= "true" ;

ELitFalse.         Expr7 ::= "false" ;

EApp.              Expr7 ::= Ident "(" [Expr] ")" ;

EString.           Expr7 ::= String ;

Concat.            Expr6 ::= Expr6 "++" Expr7 ;

Neg.               Expr5 ::= "-" Expr7 ;

Not.               Expr5 ::= "!" Expr7 ;

EMul.              Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.              Expr3 ::= Expr3 AddOp Expr4 ;

ERel.              Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.              Expr1 ::= Expr2 "&&" Expr1 ;

EOr.               Expr ::= Expr1 "||" Expr ;

LExpr.             Expr ::= "lambda" Type "<-" "(" [Arg] ")" Block ;

LApp.              Expr ::= "lambda" Type "<-" "(" [Arg] ")" Block "("[Expr]")";

coercions          Expr 7 ;

separator          Expr "," ;

-- operators -----------------------------------------------

Plus.              AddOp ::= "+" ;

Minus.             AddOp ::= "-" ;

Times.             MulOp ::= "*" ;

Div.               MulOp ::= "/" ;

Mod.               MulOp ::= "%" ;

LTH.               RelOp ::= "<" ;

LE.                RelOp ::= "<=" ;

GTH.               RelOp ::= ">" ;

GE.                RelOp ::= ">=" ;

EQU.               RelOp ::= "==" ;

NE.                RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;

